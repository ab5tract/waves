#!/usr/bin/env ruby
require 'rubygems'
require 'choice'
require 'rakegen'



# if we're in the waves source, prepend it to the load path
# waves_lib = File.expand_path( "#{File.dirname(__FILE__)}/../../waves/lib" )
# $:.unshift waves_lib if File.exist?(waves_lib)
# require 'waves'
 
WAVES = "#{File.dirname(__FILE__)}/.."
 
require File.join(WAVES, 'lib', 'ext', 'string' )
require File.join(WAVES, 'bin', 'scripts', 'generate')

 
Choice.options do
  
=begin
  banner 'Usage: waves path/to/app [-h]'
  option :help do
    long '--help'
    desc 'Show this message'
  end
  
  option :orm do
    short '-o'
    long '--orm=ORM'
    desc "Select an ORM (e.g. active_record, sequel, none)"
    default "sequel"
  end
  
  option :template do
    short '-t'
    long '--template=TEMPLATE'
    desc "Select a template for app generation (Built-in options: 'classic', 'compact')."
    default "classic"
  end
=end

  banner 'Usage: waves [server|console|generate] [options]'
=begin
  option :help do
    long 'help <operation>'
    option :generate do
      desc 'Usage: waves generate path/to/app [--orm=ORM | --template=TEMPLATE]'
    end
  end
=end
  option :generate do
    desc 'generate path/to/app [--orm=ORM | --template=TEMPLATE]'
  end
    

end
 
puts "** Waves #{File.read("#{WAVES}/doc/VERSION")}"
options = ARGV[1..-1]  # from the first to the last, savor every single drop
case ARGV[0]
when 'generate'
  include Bin::Waves::Generate
  puts Choice.choices.orm
  generate Choice.choices
when 'console'
#  include Bin::Waves::Console
#  console options
when 'server'
#  include Bin::Waves::Server
#  server options
else
  raise ArgumentError, "available_commands = w%( generate console server )    # Use 'waves help <command>' for syntax"
end